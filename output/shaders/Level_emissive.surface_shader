<shader>
	
	<inputs>
		<input name="albedoMap" type="texture" address="wrap" />
		<input name="normalMap" type="texture" address="wrap" />
		<input name="emissiveMap" type="texture" address="wrap" srgb="true"/>
        <input name="noiseMap"  type="texture" address="wrap" >materials/effects/mesh_effects/fire_tile_01.dds</input>
	</inputs>
	
	<params>
		<param name="alphaTest">true</param>
		<param name="vsPosition">true</param>
		<param name="vsNormal">true</param>
	</params>
    
	<code>
	<![CDATA[
		float3 DecodeNormal(const float4 texNormal)
		{
			float4 n = texNormal * 2 - 1;
			//return float3(n.a, n.g, sqrt(1 - dot(n.ag, n.ag)) );
			return n.xyz;
		}
		void MaterialShader(in Material_Input input, inout Material material)
		{
            
			float4 albedo = tex2D(albedoMap, input.texCoord);
			float shininess  = albedo.a * 20;
            float greyscale = (albedo.r + albedo.g + albedo.b)*0.3;
			float glossiness = 20;
            float specularColor = saturate(pow(greyscale, 0.6)*0.2);
			
			float3 ssDir = normalize(input.vsPosition);
            float intensity = -dot(ssDir, input.vsNormal);
            intensity = 1.0 - saturate(intensity);
            intensity = intensity * intensity * intensity * intensity * intensity;
            albedo += albedo * intensity * 0.2;
            
		
			material.albedo 	= pow(albedo.rgb, 0.8);
			material.tsNormal 	= DecodeNormal( tex2D(normalMap, input.texCoord) + tex2D(noiseMap, input.texCoord* 0.1)*0.1 );
			material.specular	= saturate((float3)specularColor * shininess  * (intensity + 0.8));
			material.gloss		= glossiness / 255.0;
			material.emissive   = tex2D(emissiveMap, input.texCoord).rgb;
            material.emissive   = saturate(material.emissive + material.emissive * intensity * intensity * 2.0);
			
		}
	]]>		
	</code>

</shader>