<shader>
	
	<inputs>
		<input name="albedoMap" type="texture" address="wrap" />
		<input name="normalMap" type="texture" address="wrap" />
		<input name="specularMap" type="texture" address="wrap" />
        <input name="decals" type="float">0.0</input>
	</inputs>
	
	<params>
		<param name="vsPosition">true</param>
		<param name="vsNormal">true</param>
	</params>
    
	<code>
	<![CDATA[
		float3 DecodeNormal(const float4 texNormal)
		{
			float4 n = texNormal * 2 - 1;
			//return float3(n.a, n.g, sqrt(1 - dot(n.ag, n.ag)) );
			return n.xyz;
		}
		void MaterialShader(in Material_Input input, inout Material material)
		{
		
            float showDecals   = decals;
            
			float4 specularGloss = tex2D(specularMap, input.texCoord);
            float specularColor = saturate((specularGloss.r + specularGloss.g + specularGloss.b) * 0.1+0.1);
		
			float3 ssDir = normalize(input.vsPosition);
            float intensity = -dot(ssDir, input.vsNormal);
            intensity = 1.0 - saturate(intensity);
            intensity = intensity * intensity * intensity * intensity * intensity;
            
			material.albedo 	= tex2D(albedoMap, input.texCoord).rgb;
			material.tsNormal 	= DecodeNormal( tex2D(normalMap, input.texCoord) );
			material.specular	= (float3)specularColor * (intensity + 0.8);
			material.gloss		= specularGloss.a * intensity * 4 + specularGloss.a * 0.5;
            material.id         = showDecals;
            
            
            float shine = saturate( specularGloss.a * 20);
            material.albedo += intensity * 0.25 * shine;
			
		}
	]]>		
	</code>

</shader>