<shader>
	
	<inputs>
		<input name="albedoMap" type="texture" address="wrap" />
		<input name="normalMap" type="texture" address="wrap" />
		<input name="specularMap" type="texture" address="wrap" />
		<input name="emissiveMap" type="texture" address="wrap" srgb="true"/>
		<input name="blendMap" type="texture" address="wrap">materials/effects/mesh_effects/skulk_view_blood.dds</input>
		<input name="overlayMap" type="texture" address="wrap">materials/effects/mesh_effects/nanoshield_circuit.dds</input>
		<input name="hiddenAmount" type="float">0.0</input>
		<input name="outline" type="float">0.0</input>
		<input name="highlight" type="float">0.0</input>
		<input name="tint" type="float">0.0</input>
		
		<!-- should be specified via game -->
        <!-- Row major index. 0 is the top-left rect -->
        <input name="textureIndex" type="float">0</input>	
		<!-- should be specified via material file -->
        <input name="numRows" type="float">2</input>			
        <input name="numColumns" type="float">2</input>	
	</inputs>
	
	<params>
		<param name="alphaTest">true</param>
	</params>
	
	<code>
	<![CDATA[
		float paramQuick(float x, float p) {
			return pow(x,p);
		}
		
		float paramSlow(float x, float p) {
			return 1 - pow(abs(x),p);
		}
		
		float3 DecodeNormal(const float4 texNormal)
		{
			float4 n = texNormal * 2 - 1;
			//return float3(n.a, n.g, sqrt(1 - dot(n.ag, n.ag)) );
            return n.xyz;
		}
		
		void MaterialShader(in Material_Input input, inout Material material)
		{
			float f             = 1 - hiddenAmount;
			float highlightId   = highlight;
			float tintTeam      = tint;
			
			float2 uv = input.texCoord;
			float row = floor(textureIndex / numColumns);
			float col = textureIndex - row*numColumns;
			uv.x = (col+uv.x) / numColumns;
			uv.y = (row+uv.y) / numRows;
			
			float param         = tex2D(blendMap, uv * 2.5).a; // speading parameter
			float textureSpeed  = 2;
			float destroySpeed  = 1;
		
			float4 specularGloss = tex2D(specularMap, uv);
            
            // normal maps are not atlased.
			material.tsNormal 	= DecodeNormal( tex2D(normalMap, input.texCoord) );
            
			material.specular	= specularGloss.rgb * 2.0;
			material.gloss		= specularGloss.a;
			
			float opacity       = paramSlow(param,destroySpeed);
			float blend         = paramQuick(param,textureSpeed);
	
			// Blending
			if (blend + f > 1)
			{
				material.albedo    = tex2D(albedoMap, uv).rgb;				
				material.emissive  = tex2D(emissiveMap, uv).rgb;
			}
			else
			{
				material.albedo    = tex2D(albedoMap, uv).rgb;
				material.emissive = (1 - (blend + f)) * tex2D(overlayMap, uv * float2(10, 9)).rgb * float3(2, 3, 6) * 50;
			}
            
            if (tintTeam > 0.5){
                material.albedo.r = pow(material.albedo.r, 0.95);
                material.albedo.g = pow(material.albedo.g, 1.1);
                material.albedo.b = pow(material.albedo.b, 1.1);
                
                // note that it swaps blue and red channels
                material.emissive.r = pow(material.emissive.b, 0.5);
                material.emissive.g = pow(material.emissive.g, 10.0);
                material.emissive.b = pow(material.emissive.g, 10.0);
            }else{
                if (textureIndex >= 2.9){ // forge skin fix for same team
                    float oldRed = material.albedo.r;
                    material.albedo.r = material.albedo.b;
                    material.albedo.b = oldRed;
                    float oldRedEmissive = material.emissive.r;
                    material.emissive.r = material.emissive.b;
                    material.emissive.b = oldRedEmissive;
                }
            }
            
            
            
			// Opacity
			material.opacity = opacity + f - 0.5;
			if (material.opacity < 0.5) {
				material.emissive   = 0;
			}
			
			material.id = 1*highlightId; // To make it show up on alien vision
			material.outline = outline; // for parasite
			
		}
	]]>
	</code>

</shader>