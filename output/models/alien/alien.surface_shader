<shader>
	
	<inputs>
		<input name="albedoMap" type="texture" address="wrap" />
		<input name="normalMap" type="texture" address="wrap" />
		<input name="specularMap" type="texture" address="wrap" />
		<input name="emissiveMap" type="texture" address="wrap" srgb="true"/>
		<input name="blendMap" type="texture" address="wrap">materials/effects/mesh_effects/skulk_view_blood.dds</input>
		<input name="overlayMap" type="texture" address="wrap">models/misc/infestation/infestation.dds</input>
        <input name="hiddenAmount" type="float">0.0</input>
		<input name="glowIntensity" type="float">1.0</input>
		<input name="highlight" type="float">0.0</input>
		<input name="outline" type="float">0.0</input>
		<input name="tint" type="float">1.0</input>
	</inputs>
	
	<params>
		<param name="alphaTest">true</param>
		<param name="vsPosition">true</param>
		<param name="vsNormal">true</param>
	</params>
	
	<code>
	<![CDATA[
		float paramQuick(float x, float p) {
			return pow(x,p);
		}
		
		float paramSlow(float x, float p) {
			return 1 - pow(abs(x),p);
		}
		
		float3 DecodeNormal(const float4 texNormal)
		{
			float4 n = texNormal * 2 - 1;
			//return float3(n.a, n.g, sqrt(1 - dot(n.ag, n.ag)) );
            return n.xyz;
		}
		
		void MaterialShader(in Material_Input input, inout Material material)
		{
		
			float f             = 1 - hiddenAmount;
			float highlightId   = highlight;
			float param         = tex2D(blendMap, input.texCoord).a; // speading parameter
			float textureSpeed  = 2;
			float destroySpeed  = 2.5;
			float tintTeam      = tint;
		
			float4 specularGloss = tex2D(specularMap, input.texCoord);
			material.tsNormal 	= DecodeNormal( tex2D(normalMap, input.texCoord) );
            
            float specAmount    = (specularGloss.r + specularGloss.g + specularGloss.b) * 3.5 + 0.1;
			material.gloss		= specularGloss.a * 0.1;
			
			float opacity       = paramSlow(param,destroySpeed);
			float blend         = paramQuick(param,textureSpeed);
			
			// Blending
			if (blend + f > 1)
			{
				material.albedo = tex2D(albedoMap, input.texCoord).rgb;

			} else {
			    material.albedo = tex2D(overlayMap, input.texCoord * 4).rgb;
			}

            
			// Opacity
			material.opacity = opacity + f - 0.5;
			material.emissive   = tex2D(emissiveMap, input.texCoord).rgb * f * glowIntensity;
			
			float3 ssDir = normalize(input.vsPosition);
            float intensity = -dot(ssDir, input.vsNormal);
            intensity = 1.0 - intensity;
            intensity = intensity * intensity * intensity * intensity * intensity;
            float shine = saturate( specularGloss.a * 2);
            material.albedo += intensity *  shine;
			material.specular	= (float3)specAmount * intensity;
            
			// this is reversed from marines
            if (tintTeam < 0.5){
                material.albedo.r = pow(material.albedo.r, 0.95);
                material.albedo.g = pow(material.albedo.g, 1.1);
                material.albedo.b = pow(material.albedo.b, 1.1);
				
                // this fucks with the channels
                material.emissive.b = pow(material.emissive.r, 0.5);
                material.emissive.g = pow(material.emissive.g, 0.9);
                material.emissive.r = pow(material.emissive.g, 0.9);
				
            }
			
			material.id = 1*highlightId; // To make it show up on alien vision
			material.outline = outline;
			
		}
	]]>
	</code>

</shader>