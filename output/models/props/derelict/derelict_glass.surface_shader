<shader>
	
	<inputs>
        <input name="normalMap" type="texture" address="wrap"/>
        <input name="emissiveMap" type="texture" address="wrap" srgb="true"/>
        <input name="opacityMap" type="texture" address="wrap"/>
	</inputs>
    
    <params>
        <param name="translucent">true</param>
		<param name="vsPosition">true</param>
		<param name="vsNormal">true</param>
    </params>
	
	<code>
	<![CDATA[
        float3 DecodeNormal(const float4 texNormal)
		{
			float4 n = texNormal * 2 - 1;
			//return float3(n.a, n.g, sqrt(1 - dot(n.ag, n.ag)) );
            return n.xyz;
		}
        
		void MaterialShader(in Material_Input input, inout Material material)
		{
			
			material.albedo 	= float3(0, 0, 0);
			material.tsNormal 	= DecodeNormal( tex2D(normalMap, input.texCoord) );	
			material.specular	= float3(0.5, 0.5, 0.5);
			material.gloss		= 0.1;
			material.emissive   = tex2D(emissiveMap, input.texCoord).rgb;
            material.opacity    = tex2D(opacityMap, input.texCoord).r;
			
			float3 ssDir = normalize(input.vsPosition);
            float intensity = -dot(ssDir, input.vsNormal);
            intensity = saturate(1.0 - intensity);
            intensity = intensity * intensity * intensity * intensity * intensity;
            material.albedo += intensity * 0.5;
            material.emissive =  saturate(material.emissive + material.emissive * intensity * intensity);
		}
	]]>		
	</code>

</shader>