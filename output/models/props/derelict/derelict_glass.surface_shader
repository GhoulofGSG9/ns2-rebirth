<shader>
	
	<inputs>
        <input name="normalMap" type="texture" address="wrap"/>
        <input name="emissiveMap" type="texture" address="wrap" srgb="true"/>
        <input name="opacityMap" type="texture" address="wrap"/>
	</inputs>
    
    <params>
        <param name="translucent">true</param>
		<param name="vsPosition">true</param>
		<param name="vsNormal">true</param>
    </params>
	
	<code>
	<![CDATA[
		void MaterialShader(in Material_Input input, inout Material material)
		{
            
            float3 posSq = input.vsPosition * input.vsPosition;
            float vsDistInv = 1.0f / (sqrt(posSq.x + posSq.y + posSq.z)+0.00001);
            
			float3 ssDir = normalize(input.vsPosition);
            float intensity = -dot(ssDir, input.vsNormal);
            intensity = 1.0 - saturate(intensity);
            intensity = intensity * intensity * intensity;
			float fresnelIntensity = clamp(intensity, 0, 0.5);
            
			material.albedo 	= float3(0, 0, 0);
			material.tsNormal 	= float3(0, 0, 1);
			material.specular	= float3(7, 7, 7) * fresnelIntensity  + float3(0.15, 0.15, 0.15);
			material.gloss		= 2.0 * fresnelIntensity + 1.75;
			//material.emissive   =float3(0.003, 0.0035, 0.004);
			material.transmissionColor = input.color.rgb + input.color.rgb * fresnelIntensity - float3(0.60, 0.36, 0.52);
            material.opacity    = 1;
			material.ssDistortion = input.vsNormal * 0.008 * vsDistInv;
			
		}
	]]>		
	</code>

</shader>